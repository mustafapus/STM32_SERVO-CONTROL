
SERVO_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001874  08001874  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001874  08001874  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001874  08001874  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001874  08001874  00011874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001878  08001878  00011878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800187c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08001888  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001888  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000302c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ae9  00000000  00000000  000230a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a0  00000000  00000000  00023b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000036c  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a1c9  00000000  00000000  0002439c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003619  00000000  00000000  0002e565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00036b47  00000000  00000000  00031b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ffc  00000000  00000000  000686c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000696c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800184c 	.word	0x0800184c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800184c 	.word	0x0800184c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	; 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
  }
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b7f      	cmp	r3, #127	; 0x7f
 8000268:	d828      	bhi.n	80002bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800026a:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <__NVIC_SetPriority+0xd4>)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	089b      	lsrs	r3, r3, #2
 8000274:	33c0      	adds	r3, #192	; 0xc0
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	589b      	ldr	r3, [r3, r2]
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	0011      	movs	r1, r2
 8000280:	2203      	movs	r2, #3
 8000282:	400a      	ands	r2, r1
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	21ff      	movs	r1, #255	; 0xff
 8000288:	4091      	lsls	r1, r2
 800028a:	000a      	movs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	401a      	ands	r2, r3
 8000290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	22ff      	movs	r2, #255	; 0xff
 8000298:	401a      	ands	r2, r3
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	2303      	movs	r3, #3
 80002a2:	4003      	ands	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <__NVIC_SetPriority+0xd4>)
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	089b      	lsrs	r3, r3, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	33c0      	adds	r3, #192	; 0xc0
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ba:	e031      	b.n	8000320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <__NVIC_SetPriority+0xd8>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230f      	movs	r3, #15
 80002c6:	400b      	ands	r3, r1
 80002c8:	3b08      	subs	r3, #8
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	3306      	adds	r3, #6
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	400a      	ands	r2, r1
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	21ff      	movs	r1, #255	; 0xff
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	401a      	ands	r2, r3
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	2303      	movs	r3, #3
 80002fe:	4003      	ands	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <__NVIC_SetPriority+0xd8>)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	001c      	movs	r4, r3
 800030c:	230f      	movs	r3, #15
 800030e:	4023      	ands	r3, r4
 8000310:	3b08      	subs	r3, #8
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18c3      	adds	r3, r0, r3
 800031c:	3304      	adds	r3, #4
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b003      	add	sp, #12
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <LL_RCC_HSI_Enable+0x18>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <LL_RCC_HSI_Enable+0x18>)
 800033a:	2101      	movs	r1, #1
 800033c:	430a      	orrs	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	40021000 	.word	0x40021000

0800034c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <LL_RCC_HSI_IsReady+0x1c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2202      	movs	r2, #2
 8000356:	4013      	ands	r3, r2
 8000358:	3b02      	subs	r3, #2
 800035a:	425a      	negs	r2, r3
 800035c:	4153      	adcs	r3, r2
 800035e:	b2db      	uxtb	r3, r3
}
 8000360:	0018      	movs	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	40021000 	.word	0x40021000

0800036c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	22f8      	movs	r2, #248	; 0xf8
 800037a:	4393      	bics	r3, r2
 800037c:	0019      	movs	r1, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	00da      	lsls	r2, r3, #3
 8000382:	4b03      	ldr	r3, [pc, #12]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000384:	430a      	orrs	r2, r1
 8000386:	601a      	str	r2, [r3, #0]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <LL_RCC_SetSysClkSource+0x24>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	2203      	movs	r2, #3
 80003a2:	4393      	bics	r3, r2
 80003a4:	0019      	movs	r1, r3
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <LL_RCC_SetSysClkSource+0x24>)
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	605a      	str	r2, [r3, #4]
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	40021000 	.word	0x40021000

080003bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <LL_RCC_GetSysClkSource+0x14>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	220c      	movs	r2, #12
 80003c6:	4013      	ands	r3, r2
}
 80003c8:	0018      	movs	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	40021000 	.word	0x40021000

080003d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	22f0      	movs	r2, #240	; 0xf0
 80003e2:	4393      	bics	r3, r2
 80003e4:	0019      	movs	r1, r3
 80003e6:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	430a      	orrs	r2, r1
 80003ec:	605a      	str	r2, [r3, #4]
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000

080003fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a06      	ldr	r2, [pc, #24]	; (8000424 <LL_RCC_SetAPB1Prescaler+0x28>)
 800040a:	4013      	ands	r3, r2
 800040c:	0019      	movs	r1, r3
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	430a      	orrs	r2, r1
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	40021000 	.word	0x40021000
 8000424:	fffff8ff 	.word	0xfffff8ff

08000428 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <LL_RCC_PLL_Enable+0x18>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <LL_RCC_PLL_Enable+0x18>)
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	0449      	lsls	r1, r1, #17
 8000436:	430a      	orrs	r2, r1
 8000438:	601a      	str	r2, [r3, #0]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <LL_RCC_PLL_IsReady+0x24>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	049b      	lsls	r3, r3, #18
 8000450:	4013      	ands	r3, r2
 8000452:	22fe      	movs	r2, #254	; 0xfe
 8000454:	0612      	lsls	r2, r2, #24
 8000456:	4694      	mov	ip, r2
 8000458:	4463      	add	r3, ip
 800045a:	425a      	negs	r2, r3
 800045c:	4153      	adcs	r3, r2
 800045e:	b2db      	uxtb	r3, r3
}
 8000460:	0018      	movs	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	40021000 	.word	0x40021000

0800046c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800047c:	4013      	ands	r3, r2
 800047e:	0019      	movs	r1, r3
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	025b      	lsls	r3, r3, #9
 8000486:	401a      	ands	r2, r3
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	431a      	orrs	r2, r3
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800048e:	430a      	orrs	r2, r1
 8000490:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000496:	220f      	movs	r2, #15
 8000498:	4393      	bics	r3, r2
 800049a:	0019      	movs	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	220f      	movs	r2, #15
 80004a0:	401a      	ands	r2, r3
 80004a2:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004a4:	430a      	orrs	r2, r1
 80004a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	ffc2ffff 	.word	0xffc2ffff

080004b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004c2:	6959      	ldr	r1, [r3, #20]
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b004      	add	sp, #16
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	69d9      	ldr	r1, [r3, #28]
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <LL_APB1_GRP1_EnableClock+0x28>)
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <LL_APB1_GRP1_EnableClock+0x28>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4013      	ands	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b004      	add	sp, #16
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000

08000510 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <LL_APB1_GRP2_EnableClock+0x28>)
 800051a:	6999      	ldr	r1, [r3, #24]
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_APB1_GRP2_EnableClock+0x28>)
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	430a      	orrs	r2, r1
 8000522:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LL_APB1_GRP2_EnableClock+0x28>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4013      	ands	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b004      	add	sp, #16
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <LL_FLASH_SetLatency+0x24>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	4393      	bics	r3, r2
 800054c:	0019      	movs	r1, r3
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <LL_FLASH_SetLatency+0x24>)
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b002      	add	sp, #8
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40022000 	.word	0x40022000

08000564 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <LL_FLASH_GetLatency+0x14>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2201      	movs	r2, #1
 800056e:	4013      	ands	r3, r2
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40022000 	.word	0x40022000

0800057c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2201      	movs	r2, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}

08000598 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4393      	bics	r3, r2
 80005a8:	001a      	movs	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}

080005ce <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6a1a      	ldr	r2, [r3, #32]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	431a      	orrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	621a      	str	r2, [r3, #32]
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}

08000604 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d01e      	beq.n	8000652 <LL_TIM_OC_DisableFast+0x4e>
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d019      	beq.n	800064e <LL_TIM_OC_DisableFast+0x4a>
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	2b10      	cmp	r3, #16
 800061e:	d014      	beq.n	800064a <LL_TIM_OC_DisableFast+0x46>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b40      	cmp	r3, #64	; 0x40
 8000624:	d00f      	beq.n	8000646 <LL_TIM_OC_DisableFast+0x42>
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	429a      	cmp	r2, r3
 800062e:	d008      	beq.n	8000642 <LL_TIM_OC_DisableFast+0x3e>
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	429a      	cmp	r2, r3
 8000638:	d101      	bne.n	800063e <LL_TIM_OC_DisableFast+0x3a>
 800063a:	2305      	movs	r3, #5
 800063c:	e00a      	b.n	8000654 <LL_TIM_OC_DisableFast+0x50>
 800063e:	2306      	movs	r3, #6
 8000640:	e008      	b.n	8000654 <LL_TIM_OC_DisableFast+0x50>
 8000642:	2304      	movs	r3, #4
 8000644:	e006      	b.n	8000654 <LL_TIM_OC_DisableFast+0x50>
 8000646:	2303      	movs	r3, #3
 8000648:	e004      	b.n	8000654 <LL_TIM_OC_DisableFast+0x50>
 800064a:	2302      	movs	r3, #2
 800064c:	e002      	b.n	8000654 <LL_TIM_OC_DisableFast+0x50>
 800064e:	2301      	movs	r3, #1
 8000650:	e000      	b.n	8000654 <LL_TIM_OC_DisableFast+0x50>
 8000652:	2300      	movs	r3, #0
 8000654:	200f      	movs	r0, #15
 8000656:	183a      	adds	r2, r7, r0
 8000658:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3318      	adds	r3, #24
 800065e:	0019      	movs	r1, r3
 8000660:	183b      	adds	r3, r7, r0
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <LL_TIM_OC_DisableFast+0x8c>)
 8000666:	5cd3      	ldrb	r3, [r2, r3]
 8000668:	18cb      	adds	r3, r1, r3
 800066a:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	183a      	adds	r2, r7, r0
 8000672:	7812      	ldrb	r2, [r2, #0]
 8000674:	4907      	ldr	r1, [pc, #28]	; (8000694 <LL_TIM_OC_DisableFast+0x90>)
 8000676:	5c8a      	ldrb	r2, [r1, r2]
 8000678:	0011      	movs	r1, r2
 800067a:	2204      	movs	r2, #4
 800067c:	408a      	lsls	r2, r1
 800067e:	43d2      	mvns	r2, r2
 8000680:	401a      	ands	r2, r3
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	601a      	str	r2, [r3, #0]

}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b004      	add	sp, #16
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	08001864 	.word	0x08001864
 8000694:	0800186c 	.word	0x0800186c

08000698 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d01e      	beq.n	80006e6 <LL_TIM_OC_EnablePreload+0x4e>
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d019      	beq.n	80006e2 <LL_TIM_OC_EnablePreload+0x4a>
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b10      	cmp	r3, #16
 80006b2:	d014      	beq.n	80006de <LL_TIM_OC_EnablePreload+0x46>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b40      	cmp	r3, #64	; 0x40
 80006b8:	d00f      	beq.n	80006da <LL_TIM_OC_EnablePreload+0x42>
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d008      	beq.n	80006d6 <LL_TIM_OC_EnablePreload+0x3e>
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d101      	bne.n	80006d2 <LL_TIM_OC_EnablePreload+0x3a>
 80006ce:	2305      	movs	r3, #5
 80006d0:	e00a      	b.n	80006e8 <LL_TIM_OC_EnablePreload+0x50>
 80006d2:	2306      	movs	r3, #6
 80006d4:	e008      	b.n	80006e8 <LL_TIM_OC_EnablePreload+0x50>
 80006d6:	2304      	movs	r3, #4
 80006d8:	e006      	b.n	80006e8 <LL_TIM_OC_EnablePreload+0x50>
 80006da:	2303      	movs	r3, #3
 80006dc:	e004      	b.n	80006e8 <LL_TIM_OC_EnablePreload+0x50>
 80006de:	2302      	movs	r3, #2
 80006e0:	e002      	b.n	80006e8 <LL_TIM_OC_EnablePreload+0x50>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <LL_TIM_OC_EnablePreload+0x50>
 80006e6:	2300      	movs	r3, #0
 80006e8:	200f      	movs	r0, #15
 80006ea:	183a      	adds	r2, r7, r0
 80006ec:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3318      	adds	r3, #24
 80006f2:	0019      	movs	r1, r3
 80006f4:	183b      	adds	r3, r7, r0
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <LL_TIM_OC_EnablePreload+0x88>)
 80006fa:	5cd3      	ldrb	r3, [r2, r3]
 80006fc:	18cb      	adds	r3, r1, r3
 80006fe:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	183b      	adds	r3, r7, r0
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <LL_TIM_OC_EnablePreload+0x8c>)
 800070a:	5ccb      	ldrb	r3, [r1, r3]
 800070c:	0019      	movs	r1, r3
 800070e:	2308      	movs	r3, #8
 8000710:	408b      	lsls	r3, r1
 8000712:	431a      	orrs	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b004      	add	sp, #16
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08001864 	.word	0x08001864
 8000724:	0800186c 	.word	0x0800186c

08000728 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}

08000740 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <LL_TIM_SetClockSource+0x24>)
 8000750:	401a      	ands	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	609a      	str	r2, [r3, #8]
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	ffffbff8 	.word	0xffffbff8

08000768 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	2270      	movs	r2, #112	; 0x70
 8000778:	4393      	bics	r3, r2
 800077a:	001a      	movs	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	605a      	str	r2, [r3, #4]
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}

0800078c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	4393      	bics	r3, r2
 800079c:	001a      	movs	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	609a      	str	r2, [r3, #8]
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	0212      	lsls	r2, r2, #8
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	645a      	str	r2, [r3, #68]	; 0x44
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2202      	movs	r2, #2
 80007d4:	4252      	negs	r2, r2
 80007d6:	611a      	str	r2, [r3, #16]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}

080007e0 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d101      	bne.n	80007f8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80007f4:	2301      	movs	r3, #1
 80007f6:	e000      	b.n	80007fa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}

08000802 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2205      	movs	r2, #5
 800080e:	4252      	negs	r2, r2
 8000810:	611a      	str	r2, [r3, #16]
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	2204      	movs	r2, #4
 8000828:	4013      	ands	r3, r2
 800082a:	2b04      	cmp	r3, #4
 800082c:	d101      	bne.n	8000832 <LL_TIM_IsActiveFlag_CC2+0x18>
 800082e:	2301      	movs	r3, #1
 8000830:	e000      	b.n	8000834 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8000832:	2300      	movs	r3, #0
}
 8000834:	0018      	movs	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}

0800083c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	2201      	movs	r2, #1
 800084a:	431a      	orrs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	60da      	str	r2, [r3, #12]
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}

08000858 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	2204      	movs	r2, #4
 8000866:	431a      	orrs	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	60da      	str	r2, [r3, #12]
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}

08000874 <delay_1ms>:



void delay_1ms(uint32_t num1){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	delay_1ms_cnt=0;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <delay_1ms+0x28>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
while (delay_1ms_cnt < num1) {asm("NOP");}
 8000882:	e000      	b.n	8000886 <delay_1ms+0x12>
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <delay_1ms+0x28>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	d8f9      	bhi.n	8000884 <delay_1ms+0x10>
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	20000028 	.word	0x20000028

080008a0 <TIM16_IRQHandler>:


void TIM16_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
if (LL_TIM_IsActiveFlag_UPDATE(TIM16)) {
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <TIM16_IRQHandler+0x28>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff ff9a 	bl	80007e0 <LL_TIM_IsActiveFlag_UPDATE>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d008      	beq.n	80008c2 <TIM16_IRQHandler+0x22>
	LL_TIM_ClearFlag_UPDATE(TIM16);	
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <TIM16_IRQHandler+0x28>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff ff88 	bl	80007c8 <LL_TIM_ClearFlag_UPDATE>
// 10us
	delay_10us_cnt++;	
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <TIM16_IRQHandler+0x2c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	4b03      	ldr	r3, [pc, #12]	; (80008cc <TIM16_IRQHandler+0x2c>)
 80008c0:	601a      	str	r2, [r3, #0]
}
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40014400 	.word	0x40014400
 80008cc:	2000002c 	.word	0x2000002c

080008d0 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
if (LL_TIM_IsActiveFlag_UPDATE(TIM17)) {
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <TIM17_IRQHandler+0x28>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff ff82 	bl	80007e0 <LL_TIM_IsActiveFlag_UPDATE>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d008      	beq.n	80008f2 <TIM17_IRQHandler+0x22>
	LL_TIM_ClearFlag_UPDATE(TIM17);	
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <TIM17_IRQHandler+0x28>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff ff70 	bl	80007c8 <LL_TIM_ClearFlag_UPDATE>
// 1ms
	delay_1ms_cnt++;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <TIM17_IRQHandler+0x2c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <TIM17_IRQHandler+0x2c>)
 80008f0:	601a      	str	r2, [r3, #0]

}
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40014800 	.word	0x40014800
 80008fc:	20000028 	.word	0x20000028

08000900 <TIM1_CC_IRQHandler>:




void TIM1_CC_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_CC2(TIM1))
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <TIM1_CC_IRQHandler+0x2c>)
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff ff87 	bl	800081a <LL_TIM_IsActiveFlag_CC2>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d00a      	beq.n	8000926 <TIM1_CC_IRQHandler+0x26>
    {
        LL_TIM_ClearFlag_CC2(TIM1); //
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <TIM1_CC_IRQHandler+0x2c>)
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff ff75 	bl	8000802 <LL_TIM_ClearFlag_CC2>
        LL_TIM_OC_SetCompareCH2(TIM1,servo_deger);//servo deger= 520= 0 derece ----- 3000=180 derece
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <TIM1_CC_IRQHandler+0x30>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <TIM1_CC_IRQHandler+0x2c>)
 800091e:	0019      	movs	r1, r3
 8000920:	0010      	movs	r0, r2
 8000922:	f7ff ff01 	bl	8000728 <LL_TIM_OC_SetCompareCH2>

    }
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40012c00 	.word	0x40012c00
 8000930:	20000000 	.word	0x20000000

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fde9 	bl	8000510 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	055b      	lsls	r3, r3, #21
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff fdce 	bl	80004e4 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8000948:	2301      	movs	r3, #1
 800094a:	425b      	negs	r3, r3
 800094c:	2103      	movs	r1, #3
 800094e:	0018      	movs	r0, r3
 8000950:	f7ff fc80 	bl	8000254 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f8b8 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 fa2a 	bl	8000db0 <MX_GPIO_Init>
  MX_TIM16_Init();
 800095c:	f000 f9b8 	bl	8000cd0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000960:	f000 f9ee 	bl	8000d40 <MX_TIM17_Init>
  MX_TIM1_Init();
 8000964:	f000 f8f0 	bl	8000b48 <MX_TIM1_Init>
// SysTick->VAL   = 0xffffff;			// SysTick Current Value Register (Start Value)
// SysTick->LOAD  = 0xffffff;					// Reload value
// SysTick->CTRL  = 0b100;				// Control Reg. CLK SRC | INT EN | CNT EN;
//////////////SysTick Settings///////////////////
//////////////TIM1 Settings///////////////////
  LL_TIM_EnableIT_UPDATE(TIM1);
 8000968:	4b4d      	ldr	r3, [pc, #308]	; (8000aa0 <main+0x16c>)
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff ff66 	bl	800083c <LL_TIM_EnableIT_UPDATE>
// LL_TIM_EnableIT_CC3(TIM1);
// LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
   TIM1->ARR=22999;//50hz için
 8000970:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <main+0x16c>)
 8000972:	4a4c      	ldr	r2, [pc, #304]	; (8000aa4 <main+0x170>)
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->PSC =40;//50hz için
 8000976:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <main+0x16c>)
 8000978:	2228      	movs	r2, #40	; 0x28
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  LL_TIM_EnableCounter(TIM1);
 800097c:	4b48      	ldr	r3, [pc, #288]	; (8000aa0 <main+0x16c>)
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fdfc 	bl	800057c <LL_TIM_EnableCounter>
//LL_TIM_SetPrescaler(TIM14, 1);
//LL_TIM_EnableCounter(TIM14);
//LL_TIM_SetAutoReload(TIM14,239);
//////////TIM14 Settings///////////////////
//////////TIM16 Settings///////////////////
LL_TIM_EnableIT_UPDATE(TIM16);
 8000984:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <main+0x174>)
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff ff58 	bl	800083c <LL_TIM_EnableIT_UPDATE>
LL_TIM_SetPrescaler(TIM16, 1);
 800098c:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <main+0x174>)
 800098e:	2101      	movs	r1, #1
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fe10 	bl	80005b6 <LL_TIM_SetPrescaler>
LL_TIM_EnableCounter(TIM16);
 8000996:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <main+0x174>)
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff fdef 	bl	800057c <LL_TIM_EnableCounter>
LL_TIM_SetAutoReload(TIM16,239);
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <main+0x174>)
 80009a0:	21ef      	movs	r1, #239	; 0xef
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fe13 	bl	80005ce <LL_TIM_SetAutoReload>
//////////TIM16 Settings///////////////////
//////////TIM17 Settings///////////////////
LL_TIM_EnableCounter(TIM17);
 80009a8:	4b40      	ldr	r3, [pc, #256]	; (8000aac <main+0x178>)
 80009aa:	0018      	movs	r0, r3
 80009ac:	f7ff fde6 	bl	800057c <LL_TIM_EnableCounter>
LL_TIM_EnableIT_UPDATE(TIM17);
 80009b0:	4b3e      	ldr	r3, [pc, #248]	; (8000aac <main+0x178>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff ff42 	bl	800083c <LL_TIM_EnableIT_UPDATE>
TIM17->PSC=0;
 80009b8:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <main+0x178>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
TIM17->ARR=47999;
 80009be:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <main+0x178>)
 80009c0:	4a3b      	ldr	r2, [pc, #236]	; (8000ab0 <main+0x17c>)
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
#include "_Set_Timers.h"


 delay_1ms(20);
 80009c4:	2014      	movs	r0, #20
 80009c6:	f7ff ff55 	bl	8000874 <delay_1ms>
 delay_1ms(20);
 80009ca:	2014      	movs	r0, #20
 80009cc:	f7ff ff52 	bl	8000874 <delay_1ms>


 LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <main+0x16c>)
 80009d2:	2110      	movs	r1, #16
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fe06 	bl	80005e6 <LL_TIM_CC_EnableChannel>
 LL_TIM_EnableAllOutputs(TIM1);
 80009da:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <main+0x16c>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff fee4 	bl	80007aa <LL_TIM_EnableAllOutputs>
 NVIC_SetPriority(TIM1_CC_IRQn, 0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	200e      	movs	r0, #14
 80009e6:	f7ff fc35 	bl	8000254 <__NVIC_SetPriority>
 NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009ea:	200e      	movs	r0, #14
 80009ec:	f7ff fc18 	bl	8000220 <__NVIC_EnableIRQ>
 LL_TIM_EnableIT_CC2(TIM1);
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <main+0x16c>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff ff30 	bl	8000858 <LL_TIM_EnableIT_CC2>
 //LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2);




 NVIC_SetPriority(SysTick_IRQn, 3);
 80009f8:	2301      	movs	r3, #1
 80009fa:	425b      	negs	r3, r3
 80009fc:	2103      	movs	r1, #3
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fc28 	bl	8000254 <__NVIC_SetPriority>
 NVIC_SetPriority(TIM16_IRQn, 3);
 8000a04:	2103      	movs	r1, #3
 8000a06:	2015      	movs	r0, #21
 8000a08:	f7ff fc24 	bl	8000254 <__NVIC_SetPriority>
 NVIC_SetPriority(TIM17_IRQn, 3);
 8000a0c:	2103      	movs	r1, #3
 8000a0e:	2016      	movs	r0, #22
 8000a10:	f7ff fc20 	bl	8000254 <__NVIC_SetPriority>



if(servo_deger<=3000 && derece180==0){
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <main+0x180>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <main+0x184>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d81d      	bhi.n	8000a5a <main+0x126>
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <main+0x188>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d119      	bne.n	8000a5a <main+0x126>


			for ( i = 520; i < 3001; i++)
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <main+0x18c>)
 8000a28:	2282      	movs	r2, #130	; 0x82
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	e00e      	b.n	8000a4e <main+0x11a>
			        {
							servo_deger=i;
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <main+0x18c>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <main+0x180>)
 8000a36:	601a      	str	r2, [r3, #0]
									delay_1ms(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff ff1b 	bl	8000874 <delay_1ms>
									derece180=1;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <main+0x188>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
			for ( i = 520; i < 3001; i++)
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <main+0x18c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <main+0x18c>)
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <main+0x18c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <main+0x184>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d9eb      	bls.n	8000a30 <main+0xfc>
if(servo_deger<=3000 && derece180==0){
 8000a58:	e7dc      	b.n	8000a14 <main+0xe0>
			        }

}


		else if(servo_deger>=3000 && derece180==1){
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <main+0x180>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <main+0x190>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d9d7      	bls.n	8000a14 <main+0xe0>
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <main+0x188>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d1d3      	bne.n	8000a14 <main+0xe0>

			for ( i = 3000; i > 520; i--)
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <main+0x18c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <main+0x184>)
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	e00e      	b.n	8000a92 <main+0x15e>
			        {
							servo_deger=i;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <main+0x18c>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <main+0x180>)
 8000a7a:	601a      	str	r2, [r3, #0]
									delay_1ms(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff fef9 	bl	8000874 <delay_1ms>
									derece180=0;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <main+0x188>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
			for ( i = 3000; i > 520; i--)
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <main+0x18c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <main+0x18c>)
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <main+0x18c>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	2382      	movs	r3, #130	; 0x82
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d8ea      	bhi.n	8000a74 <main+0x140>
if(servo_deger<=3000 && derece180==0){
 8000a9e:	e7b9      	b.n	8000a14 <main+0xe0>
 8000aa0:	40012c00 	.word	0x40012c00
 8000aa4:	000059d7 	.word	0x000059d7
 8000aa8:	40014400 	.word	0x40014400
 8000aac:	40014800 	.word	0x40014800
 8000ab0:	0000bb7f 	.word	0x0000bb7f
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	00000bb8 	.word	0x00000bb8
 8000abc:	20000030 	.word	0x20000030
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	00000bb7 	.word	0x00000bb7

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fd35 	bl	800053c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	f7ff fd46 	bl	8000564 <LL_FLASH_GetLatency>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d1fa      	bne.n	8000ad4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000ade:	f7ff fc27 	bl	8000330 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	f7ff fc32 	bl	800034c <LL_RCC_HSI_IsReady>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d1fa      	bne.n	8000ae4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000aee:	2010      	movs	r0, #16
 8000af0:	f7ff fc3c 	bl	800036c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	039b      	lsls	r3, r3, #14
 8000af8:	0019      	movs	r1, r3
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fcb6 	bl	800046c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b00:	f7ff fc92 	bl	8000428 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	f7ff fc9d 	bl	8000444 <LL_RCC_PLL_IsReady>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d1fa      	bne.n	8000b06 <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fc5f 	bl	80003d4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fc70 	bl	80003fc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fc39 	bl	8000394 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	f7ff fc4a 	bl	80003bc <LL_RCC_GetSysClkSource>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d1fa      	bne.n	8000b24 <SystemClock_Config+0x5c>
  {

  }
  LL_Init1msTick(48000000);
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SystemClock_Config+0x7c>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fe41 	bl	80017b8 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8000b36:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <SystemClock_Config+0x7c>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fe4d 	bl	80017d8 <LL_SetSystemCoreClock>
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	02dc6c00 	.word	0x02dc6c00

08000b48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	b09b      	sub	sp, #108	; 0x6c
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b4e:	2654      	movs	r6, #84	; 0x54
 8000b50:	19bb      	adds	r3, r7, r6
 8000b52:	0018      	movs	r0, r3
 8000b54:	2314      	movs	r3, #20
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f000 fe4b 	bl	80017f4 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000b5e:	2434      	movs	r4, #52	; 0x34
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	0018      	movs	r0, r3
 8000b64:	2320      	movs	r3, #32
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f000 fe43 	bl	80017f4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000b6e:	251c      	movs	r5, #28
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	0018      	movs	r0, r3
 8000b74:	2318      	movs	r3, #24
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f000 fe3b 	bl	80017f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2318      	movs	r3, #24
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f000 fe34 	bl	80017f4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM1);
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fcbd 	bl	8000510 <LL_APB1_GRP2_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_CC_IRQn, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	200e      	movs	r0, #14
 8000b9a:	f7ff fb5b 	bl	8000254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b9e:	200e      	movs	r0, #14
 8000ba0:	f7ff fb3e 	bl	8000220 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000ba4:	19bb      	adds	r3, r7, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000baa:	0031      	movs	r1, r6
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	4a44      	ldr	r2, [pc, #272]	; (8000cc8 <MX_TIM1_Init+0x180>)
 8000bb6:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	4a41      	ldr	r2, [pc, #260]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0010      	movs	r0, r2
 8000bcc:	f000 fab4 	bl	8001138 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000bd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fce0 	bl	8000598 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000bd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fdaf 	bl	8000740 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000be4:	2110      	movs	r1, #16
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fd56 	bl	8000698 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000bec:	0021      	movs	r1, r4
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2260      	movs	r2, #96	; 0x60
 8000bf2:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	482a      	ldr	r0, [pc, #168]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000c22:	001a      	movs	r2, r3
 8000c24:	2110      	movs	r1, #16
 8000c26:	f000 faff 	bl	8001228 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fce8 	bl	8000604 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff fd95 	bl	8000768 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fda3 	bl	800078c <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000c46:	0029      	movs	r1, r5
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  TIM_BDTRInitStruct.DeadTime = 0;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	731a      	strb	r2, [r3, #12]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	81da      	strh	r2, [r3, #14]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	0192      	lsls	r2, r2, #6
 8000c6c:	611a      	str	r2, [r3, #16]
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <MX_TIM1_Init+0x184>)
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	f000 fb2e 	bl	80012dc <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fc17 	bl	80004b8 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA9   ------> TIM1_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2202      	movs	r2, #2
 8000c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2202      	movs	r2, #2
 8000cae:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	1d3a      	adds	r2, r7, #4
 8000cb2:	2390      	movs	r3, #144	; 0x90
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 f97f 	bl	8000fbc <LL_GPIO_Init>

}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b01b      	add	sp, #108	; 0x6c
 8000cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	0000ffff 	.word	0x0000ffff
 8000ccc:	40012c00 	.word	0x40012c00

08000cd0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	2314      	movs	r3, #20
 8000cdc:	001a      	movs	r2, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f000 fd88 	bl	80017f4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM16);
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fc11 	bl	8000510 <LL_APB1_GRP2_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM16_IRQn, 0);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2015      	movs	r0, #21
 8000cf2:	f7ff faaf 	bl	8000254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM16_IRQn);
 8000cf6:	2015      	movs	r0, #21
 8000cf8:	f7ff fa92 	bl	8000220 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <MX_TIM16_Init+0x68>)
 8000d0c:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <MX_TIM16_Init+0x6c>)
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f000 fa09 	bl	8001138 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <MX_TIM16_Init+0x6c>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff fc35 	bl	8000598 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b006      	add	sp, #24
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	0000ffff 	.word	0x0000ffff
 8000d3c:	40014400 	.word	0x40014400

08000d40 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f000 fd50 	bl	80017f4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM17);
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	02db      	lsls	r3, r3, #11
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff fbd9 	bl	8000510 <LL_APB1_GRP2_EnableClock>

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM17_IRQn, 0);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2016      	movs	r0, #22
 8000d62:	f7ff fa77 	bl	8000254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM17_IRQn);
 8000d66:	2016      	movs	r0, #22
 8000d68:	f7ff fa5a 	bl	8000220 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <MX_TIM17_Init+0x68>)
 8000d7c:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <MX_TIM17_Init+0x6c>)
 8000d8e:	0019      	movs	r1, r3
 8000d90:	0010      	movs	r0, r2
 8000d92:	f000 f9d1 	bl	8001138 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <MX_TIM17_Init+0x6c>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fbfd 	bl	8000598 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b006      	add	sp, #24
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	0000ffff 	.word	0x0000ffff
 8000dac:	40014800 	.word	0x40014800

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff fb7d 	bl	80004b8 <LL_AHB1_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dfc:	f7ff fff7 	bl	8000dee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	; (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e26:	f000 fced 	bl	8001804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2a:	f7ff fd83 	bl	8000934 <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   r0, =_estack
 8000e30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e3c:	0800187c 	.word	0x0800187c
  ldr r2, =_sbss
 8000e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e44:	20000034 	.word	0x20000034

08000e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_IRQHandler>

08000e4a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	435b      	muls	r3, r3
 8000e5e:	001a      	movs	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	189b      	adds	r3, r3, r2
 8000e66:	43db      	mvns	r3, r3
 8000e68:	400b      	ands	r3, r1
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	435b      	muls	r3, r3
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	434b      	muls	r3, r1
 8000e74:	431a      	orrs	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	401a      	ands	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	434b      	muls	r3, r1
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	605a      	str	r2, [r3, #4]
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b004      	add	sp, #16
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6899      	ldr	r1, [r3, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	435b      	muls	r3, r3
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	189b      	adds	r3, r3, r2
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	400b      	ands	r3, r1
 8000ecc:	001a      	movs	r2, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	435b      	muls	r3, r3
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	434b      	muls	r3, r1
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	609a      	str	r2, [r3, #8]
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b004      	add	sp, #16
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	68d9      	ldr	r1, [r3, #12]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	435b      	muls	r3, r3
 8000ef8:	001a      	movs	r2, r3
 8000efa:	0013      	movs	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	189b      	adds	r3, r3, r2
 8000f00:	43db      	mvns	r3, r3
 8000f02:	400b      	ands	r3, r1
 8000f04:	001a      	movs	r2, r3
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	435b      	muls	r3, r3
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	434b      	muls	r3, r1
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	60da      	str	r2, [r3, #12]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b004      	add	sp, #16
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a19      	ldr	r1, [r3, #32]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	435b      	muls	r3, r3
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	4353      	muls	r3, r2
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	435a      	muls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	400b      	ands	r3, r1
 8000f42:	001a      	movs	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	435b      	muls	r3, r3
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	434b      	muls	r3, r1
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	434b      	muls	r3, r1
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	434b      	muls	r3, r1
 8000f54:	431a      	orrs	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	0a12      	lsrs	r2, r2, #8
 8000f7a:	4353      	muls	r3, r2
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	0a12      	lsrs	r2, r2, #8
 8000f80:	4353      	muls	r3, r2
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	0a12      	lsrs	r2, r2, #8
 8000f86:	435a      	muls	r2, r3
 8000f88:	0013      	movs	r3, r2
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	400b      	ands	r3, r1
 8000f92:	001a      	movs	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	0a09      	lsrs	r1, r1, #8
 8000f9c:	434b      	muls	r3, r1
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	0a09      	lsrs	r1, r1, #8
 8000fa2:	434b      	muls	r3, r1
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	0a09      	lsrs	r1, r1, #8
 8000fa8:	434b      	muls	r3, r1
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	434b      	muls	r3, r1
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000fca:	e048      	b.n	800105e <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d03a      	beq.n	8001058 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d003      	beq.n	8000ff2 <LL_GPIO_Init+0x36>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d10e      	bne.n	8001010 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff ff56 	bl	8000eac <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ff39 	bl	8000e82 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff63 	bl	8000ee4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d111      	bne.n	800104a <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2bff      	cmp	r3, #255	; 0xff
 800102a:	d807      	bhi.n	800103c <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ff71 	bl	8000f1c <LL_GPIO_SetAFPin_0_7>
 800103a:	e006      	b.n	800104a <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	695a      	ldr	r2, [r3, #20]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ff8c 	bl	8000f62 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff fef9 	bl	8000e4a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	40da      	lsrs	r2, r3
 8001066:	1e13      	subs	r3, r2, #0
 8001068:	d1b0      	bne.n	8000fcc <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800106a:	2300      	movs	r3, #0
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b004      	add	sp, #16
 8001072:	bd80      	pop	{r7, pc}

08001074 <LL_TIM_SetPrescaler>:
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_TIM_SetAutoReload>:
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b002      	add	sp, #8
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LL_TIM_SetRepetitionCounter>:
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}

080010bc <LL_TIM_OC_SetCompareCH1>:
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <LL_TIM_OC_SetCompareCH2>:
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}

080010ec <LL_TIM_OC_SetCompareCH3>:
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <LL_TIM_OC_SetCompareCH4>:
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}

0800111c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	2201      	movs	r2, #1
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	615a      	str	r2, [r3, #20]
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}

08001138 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a30      	ldr	r2, [pc, #192]	; (800120c <LL_TIM_Init+0xd4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d003      	beq.n	8001158 <LL_TIM_Init+0x20>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <LL_TIM_Init+0xd8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d107      	bne.n	8001168 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2270      	movs	r2, #112	; 0x70
 800115c:	4393      	bics	r3, r2
 800115e:	001a      	movs	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a28      	ldr	r2, [pc, #160]	; (800120c <LL_TIM_Init+0xd4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d013      	beq.n	8001198 <LL_TIM_Init+0x60>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a27      	ldr	r2, [pc, #156]	; (8001210 <LL_TIM_Init+0xd8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d00f      	beq.n	8001198 <LL_TIM_Init+0x60>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a26      	ldr	r2, [pc, #152]	; (8001214 <LL_TIM_Init+0xdc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d00b      	beq.n	8001198 <LL_TIM_Init+0x60>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <LL_TIM_Init+0xe0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d007      	beq.n	8001198 <LL_TIM_Init+0x60>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a24      	ldr	r2, [pc, #144]	; (800121c <LL_TIM_Init+0xe4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d003      	beq.n	8001198 <LL_TIM_Init+0x60>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a23      	ldr	r2, [pc, #140]	; (8001220 <LL_TIM_Init+0xe8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d106      	bne.n	80011a6 <LL_TIM_Init+0x6e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <LL_TIM_Init+0xec>)
 800119c:	401a      	ands	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0011      	movs	r1, r2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff ff69 	bl	800108c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	001a      	movs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff55 	bl	8001074 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <LL_TIM_Init+0xd4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00b      	beq.n	80011ea <LL_TIM_Init+0xb2>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a10      	ldr	r2, [pc, #64]	; (8001218 <LL_TIM_Init+0xe0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <LL_TIM_Init+0xb2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a0f      	ldr	r2, [pc, #60]	; (800121c <LL_TIM_Init+0xe4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d003      	beq.n	80011ea <LL_TIM_Init+0xb2>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LL_TIM_Init+0xe8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d106      	bne.n	80011f8 <LL_TIM_Init+0xc0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0011      	movs	r1, r2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff ff56 	bl	80010a4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff ff8e 	bl	800111c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b004      	add	sp, #16
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	40012c00 	.word	0x40012c00
 8001210:	40000400 	.word	0x40000400
 8001214:	40002000 	.word	0x40002000
 8001218:	40014000 	.word	0x40014000
 800121c:	40014400 	.word	0x40014400
 8001220:	40014800 	.word	0x40014800
 8001224:	fffffcff 	.word	0xfffffcff

08001228 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001234:	2317      	movs	r3, #23
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	429a      	cmp	r2, r3
 8001244:	d036      	beq.n	80012b4 <LL_TIM_OC_Init+0x8c>
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	015b      	lsls	r3, r3, #5
 800124c:	429a      	cmp	r2, r3
 800124e:	d83c      	bhi.n	80012ca <LL_TIM_OC_Init+0xa2>
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	429a      	cmp	r2, r3
 8001258:	d021      	beq.n	800129e <LL_TIM_OC_Init+0x76>
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	429a      	cmp	r2, r3
 8001262:	d832      	bhi.n	80012ca <LL_TIM_OC_Init+0xa2>
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d003      	beq.n	8001272 <LL_TIM_OC_Init+0x4a>
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d00b      	beq.n	8001288 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001270:	e02b      	b.n	80012ca <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001272:	2317      	movs	r3, #23
 8001274:	18fc      	adds	r4, r7, r3
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f000 f879 	bl	8001374 <OC1Config>
 8001282:	0003      	movs	r3, r0
 8001284:	7023      	strb	r3, [r4, #0]
      break;
 8001286:	e021      	b.n	80012cc <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001288:	2317      	movs	r3, #23
 800128a:	18fc      	adds	r4, r7, r3
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f000 f8f2 	bl	800147c <OC2Config>
 8001298:	0003      	movs	r3, r0
 800129a:	7023      	strb	r3, [r4, #0]
      break;
 800129c:	e016      	b.n	80012cc <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800129e:	2317      	movs	r3, #23
 80012a0:	18fc      	adds	r4, r7, r3
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	0011      	movs	r1, r2
 80012a8:	0018      	movs	r0, r3
 80012aa:	f000 f971 	bl	8001590 <OC3Config>
 80012ae:	0003      	movs	r3, r0
 80012b0:	7023      	strb	r3, [r4, #0]
      break;
 80012b2:	e00b      	b.n	80012cc <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80012b4:	2317      	movs	r3, #23
 80012b6:	18fc      	adds	r4, r7, r3
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	0011      	movs	r1, r2
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 f9f0 	bl	80016a4 <OC4Config>
 80012c4:	0003      	movs	r3, r0
 80012c6:	7023      	strb	r3, [r4, #0]
      break;
 80012c8:	e000      	b.n	80012cc <LL_TIM_OC_Init+0xa4>
      break;
 80012ca:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 80012cc:	2317      	movs	r3, #23
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	781b      	ldrb	r3, [r3, #0]
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b007      	add	sp, #28
 80012d8:	bd90      	pop	{r4, r7, pc}
	...

080012dc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	22ff      	movs	r2, #255	; 0xff
 80012ee:	4393      	bics	r3, r2
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	7b12      	ldrb	r2, [r2, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <LL_TIM_BDTR_Init+0x80>)
 80012fc:	401a      	ands	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	4313      	orrs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <LL_TIM_BDTR_Init+0x84>)
 800130a:	401a      	ands	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <LL_TIM_BDTR_Init+0x88>)
 8001318:	401a      	ands	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4a10      	ldr	r2, [pc, #64]	; (8001368 <LL_TIM_BDTR_Init+0x8c>)
 8001326:	4013      	ands	r3, r2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	89d2      	ldrh	r2, [r2, #14]
 800132c:	4313      	orrs	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <LL_TIM_BDTR_Init+0x90>)
 8001334:	401a      	ands	r2, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <LL_TIM_BDTR_Init+0x94>)
 8001342:	401a      	ands	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	4313      	orrs	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8001352:	2300      	movs	r3, #0
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b004      	add	sp, #16
 800135a:	bd80      	pop	{r7, pc}
 800135c:	fffffcff 	.word	0xfffffcff
 8001360:	fffffbff 	.word	0xfffffbff
 8001364:	fffff7ff 	.word	0xfffff7ff
 8001368:	ffffefff 	.word	0xffffefff
 800136c:	ffffdfff 	.word	0xffffdfff
 8001370:	ffffbfff 	.word	0xffffbfff

08001374 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2201      	movs	r2, #1
 8001384:	4393      	bics	r3, r2
 8001386:	001a      	movs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2203      	movs	r2, #3
 80013a2:	4393      	bics	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2270      	movs	r2, #112	; 0x70
 80013aa:	4393      	bics	r3, r2
 80013ac:	001a      	movs	r2, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2202      	movs	r2, #2
 80013ba:	4393      	bics	r3, r2
 80013bc:	001a      	movs	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4393      	bics	r3, r2
 80013cc:	001a      	movs	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a22      	ldr	r2, [pc, #136]	; (8001464 <OC1Config+0xf0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00b      	beq.n	80013f6 <OC1Config+0x82>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <OC1Config+0xf4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <OC1Config+0x82>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a20      	ldr	r2, [pc, #128]	; (800146c <OC1Config+0xf8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d003      	beq.n	80013f6 <OC1Config+0x82>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <OC1Config+0xfc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d120      	bne.n	8001438 <OC1Config+0xc4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2208      	movs	r2, #8
 80013fa:	4393      	bics	r3, r2
 80013fc:	001a      	movs	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4313      	orrs	r3, r2
 8001406:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2204      	movs	r2, #4
 800140c:	4393      	bics	r3, r2
 800140e:	001a      	movs	r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4313      	orrs	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4a15      	ldr	r2, [pc, #84]	; (8001474 <OC1Config+0x100>)
 800141e:	401a      	ands	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <OC1Config+0x104>)
 800142c:	401a      	ands	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff fe35 	bl	80010bc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001458:	2300      	movs	r3, #0
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b006      	add	sp, #24
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40012c00 	.word	0x40012c00
 8001468:	40014000 	.word	0x40014000
 800146c:	40014400 	.word	0x40014400
 8001470:	40014800 	.word	0x40014800
 8001474:	fffffeff 	.word	0xfffffeff
 8001478:	fffffdff 	.word	0xfffffdff

0800147c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	2210      	movs	r2, #16
 800148c:	4393      	bics	r3, r2
 800148e:	001a      	movs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4a31      	ldr	r2, [pc, #196]	; (8001570 <OC2Config+0xf4>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a30      	ldr	r2, [pc, #192]	; (8001574 <OC2Config+0xf8>)
 80014b2:	401a      	ands	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2220      	movs	r2, #32
 80014c2:	4393      	bics	r3, r2
 80014c4:	001a      	movs	r2, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4313      	orrs	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2210      	movs	r2, #16
 80014d4:	4393      	bics	r3, r2
 80014d6:	001a      	movs	r2, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	4313      	orrs	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a24      	ldr	r2, [pc, #144]	; (8001578 <OC2Config+0xfc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00b      	beq.n	8001502 <OC2Config+0x86>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a23      	ldr	r2, [pc, #140]	; (800157c <OC2Config+0x100>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <OC2Config+0x86>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <OC2Config+0x104>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d003      	beq.n	8001502 <OC2Config+0x86>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <OC2Config+0x108>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d121      	bne.n	8001546 <OC2Config+0xca>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	4393      	bics	r3, r2
 8001508:	001a      	movs	r2, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	019b      	lsls	r3, r3, #6
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	4393      	bics	r3, r2
 800151a:	001a      	movs	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	4313      	orrs	r3, r2
 8001524:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4a17      	ldr	r2, [pc, #92]	; (8001588 <OC2Config+0x10c>)
 800152a:	401a      	ands	r2, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <OC2Config+0x110>)
 800153a:	401a      	ands	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0011      	movs	r1, r2
 800155a:	0018      	movs	r0, r3
 800155c:	f7ff fdba 	bl	80010d4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001566:	2300      	movs	r3, #0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b006      	add	sp, #24
 800156e:	bd80      	pop	{r7, pc}
 8001570:	fffffcff 	.word	0xfffffcff
 8001574:	ffff8fff 	.word	0xffff8fff
 8001578:	40012c00 	.word	0x40012c00
 800157c:	40014000 	.word	0x40014000
 8001580:	40014400 	.word	0x40014400
 8001584:	40014800 	.word	0x40014800
 8001588:	fffffbff 	.word	0xfffffbff
 800158c:	fffff7ff 	.word	0xfffff7ff

08001590 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a37      	ldr	r2, [pc, #220]	; (800167c <OC3Config+0xec>)
 80015a0:	401a      	ands	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2203      	movs	r2, #3
 80015bc:	4393      	bics	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2270      	movs	r2, #112	; 0x70
 80015c4:	4393      	bics	r3, r2
 80015c6:	001a      	movs	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4a2b      	ldr	r2, [pc, #172]	; (8001680 <OC3Config+0xf0>)
 80015d4:	401a      	ands	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	4a26      	ldr	r2, [pc, #152]	; (800167c <OC3Config+0xec>)
 80015e4:	401a      	ands	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a24      	ldr	r2, [pc, #144]	; (8001684 <OC3Config+0xf4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00b      	beq.n	8001610 <OC3Config+0x80>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a23      	ldr	r2, [pc, #140]	; (8001688 <OC3Config+0xf8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d007      	beq.n	8001610 <OC3Config+0x80>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a22      	ldr	r2, [pc, #136]	; (800168c <OC3Config+0xfc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d003      	beq.n	8001610 <OC3Config+0x80>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a21      	ldr	r2, [pc, #132]	; (8001690 <OC3Config+0x100>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d11f      	bne.n	8001650 <OC3Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <OC3Config+0x104>)
 8001614:	401a      	ands	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	029b      	lsls	r3, r3, #10
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <OC3Config+0x108>)
 8001624:	401a      	ands	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	029b      	lsls	r3, r3, #10
 800162c:	4313      	orrs	r3, r2
 800162e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <OC3Config+0x10c>)
 8001634:	401a      	ands	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <OC3Config+0x110>)
 8001644:	401a      	ands	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	015b      	lsls	r3, r3, #5
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	0011      	movs	r1, r2
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fd41 	bl	80010ec <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001670:	2300      	movs	r3, #0
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b006      	add	sp, #24
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	fffffeff 	.word	0xfffffeff
 8001680:	fffffdff 	.word	0xfffffdff
 8001684:	40012c00 	.word	0x40012c00
 8001688:	40014000 	.word	0x40014000
 800168c:	40014400 	.word	0x40014400
 8001690:	40014800 	.word	0x40014800
 8001694:	fffff7ff 	.word	0xfffff7ff
 8001698:	fffffbff 	.word	0xfffffbff
 800169c:	ffffefff 	.word	0xffffefff
 80016a0:	ffffdfff 	.word	0xffffdfff

080016a4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <OC4Config+0xbc>)
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a25      	ldr	r2, [pc, #148]	; (8001764 <OC4Config+0xc0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <OC4Config+0xc4>)
 80016d8:	401a      	ands	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4a21      	ldr	r2, [pc, #132]	; (800176c <OC4Config+0xc8>)
 80016e8:	401a      	ands	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	031b      	lsls	r3, r3, #12
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4a1a      	ldr	r2, [pc, #104]	; (8001760 <OC4Config+0xbc>)
 80016f8:	401a      	ands	r2, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	031b      	lsls	r3, r3, #12
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <OC4Config+0xcc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00b      	beq.n	8001724 <OC4Config+0x80>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a19      	ldr	r2, [pc, #100]	; (8001774 <OC4Config+0xd0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d007      	beq.n	8001724 <OC4Config+0x80>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a18      	ldr	r2, [pc, #96]	; (8001778 <OC4Config+0xd4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d003      	beq.n	8001724 <OC4Config+0x80>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <OC4Config+0xd8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d107      	bne.n	8001734 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	4a16      	ldr	r2, [pc, #88]	; (8001780 <OC4Config+0xdc>)
 8001728:	401a      	ands	r2, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	019b      	lsls	r3, r3, #6
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0011      	movs	r1, r2
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff fcdb 	bl	8001104 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b006      	add	sp, #24
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	ffffefff 	.word	0xffffefff
 8001764:	fffffcff 	.word	0xfffffcff
 8001768:	ffff8fff 	.word	0xffff8fff
 800176c:	ffffdfff 	.word	0xffffdfff
 8001770:	40012c00 	.word	0x40012c00
 8001774:	40014000 	.word	0x40014000
 8001778:	40014400 	.word	0x40014400
 800177c:	40014800 	.word	0x40014800
 8001780:	ffffbfff 	.word	0xffffbfff

08001784 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7fe fcb9 	bl	8000108 <__udivsi3>
 8001796:	0003      	movs	r3, r0
 8001798:	001a      	movs	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <LL_InitTick+0x30>)
 800179c:	3a01      	subs	r2, #1
 800179e:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <LL_InitTick+0x30>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <LL_InitTick+0x30>)
 80017a8:	2205      	movs	r2, #5
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80017c0:	23fa      	movs	r3, #250	; 0xfa
 80017c2:	009a      	lsls	r2, r3, #2
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0011      	movs	r1, r2
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff ffdb 	bl	8001784 <LL_InitTick>
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <LL_SetSystemCoreClock+0x18>)
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	20000008 	.word	0x20000008

080017f4 <memset>:
 80017f4:	0003      	movs	r3, r0
 80017f6:	1882      	adds	r2, r0, r2
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d100      	bne.n	80017fe <memset+0xa>
 80017fc:	4770      	bx	lr
 80017fe:	7019      	strb	r1, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	e7f9      	b.n	80017f8 <memset+0x4>

08001804 <__libc_init_array>:
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	2600      	movs	r6, #0
 8001808:	4c0c      	ldr	r4, [pc, #48]	; (800183c <__libc_init_array+0x38>)
 800180a:	4d0d      	ldr	r5, [pc, #52]	; (8001840 <__libc_init_array+0x3c>)
 800180c:	1b64      	subs	r4, r4, r5
 800180e:	10a4      	asrs	r4, r4, #2
 8001810:	42a6      	cmp	r6, r4
 8001812:	d109      	bne.n	8001828 <__libc_init_array+0x24>
 8001814:	2600      	movs	r6, #0
 8001816:	f000 f819 	bl	800184c <_init>
 800181a:	4c0a      	ldr	r4, [pc, #40]	; (8001844 <__libc_init_array+0x40>)
 800181c:	4d0a      	ldr	r5, [pc, #40]	; (8001848 <__libc_init_array+0x44>)
 800181e:	1b64      	subs	r4, r4, r5
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	42a6      	cmp	r6, r4
 8001824:	d105      	bne.n	8001832 <__libc_init_array+0x2e>
 8001826:	bd70      	pop	{r4, r5, r6, pc}
 8001828:	00b3      	lsls	r3, r6, #2
 800182a:	58eb      	ldr	r3, [r5, r3]
 800182c:	4798      	blx	r3
 800182e:	3601      	adds	r6, #1
 8001830:	e7ee      	b.n	8001810 <__libc_init_array+0xc>
 8001832:	00b3      	lsls	r3, r6, #2
 8001834:	58eb      	ldr	r3, [r5, r3]
 8001836:	4798      	blx	r3
 8001838:	3601      	adds	r6, #1
 800183a:	e7f2      	b.n	8001822 <__libc_init_array+0x1e>
 800183c:	08001874 	.word	0x08001874
 8001840:	08001874 	.word	0x08001874
 8001844:	08001878 	.word	0x08001878
 8001848:	08001874 	.word	0x08001874

0800184c <_init>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr

08001858 <_fini>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185e:	bc08      	pop	{r3}
 8001860:	469e      	mov	lr, r3
 8001862:	4770      	bx	lr
